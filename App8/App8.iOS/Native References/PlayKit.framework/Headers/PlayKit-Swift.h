// Generated by Apple Swift version 4.0 effective-3.2 (swiftlang-900.0.65.2 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import KalturaNetKit;
@import Dispatch;
@import CoreMedia;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("PlayKit")

/// PKEvent
SWIFT_CLASS("_TtC7PlayKit7PKEvent")
@interface PKEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7PlayKit7AdEvent")
@interface AdEvent : PKEvent
/// <hr/>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SWIFT_METATYPE(AdEvent)> * _Nonnull allEventTypes;)
+ (NSArray<SWIFT_METATYPE(AdEvent)> * _Nonnull)allEventTypes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakReady;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakReady SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull allAdsCompleted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)allAdsCompleted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adComplete;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adComplete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adClicked;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adFirstQuartile;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adFirstQuartile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adLoaded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adLog;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adLog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adMidpoint;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adMidpoint SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPaused;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPaused SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adResumed;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adResumed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adSkipped;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adSkipped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adTapped;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adTapped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adThirdQuartile;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adThirdQuartile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidProgressToTime;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidProgressToTime SWIFT_WARN_UNUSED_RESULT;
/// Ad requested the content to pause (before ad starts playing)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidRequestContentPause;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidRequestContentPause SWIFT_WARN_UNUSED_RESULT;
/// Ad requested content resume (when finished playing ads or when error occurs and playback needs to continue)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidRequestContentResume;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidRequestContentResume SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull webOpenerEvent;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)webOpenerEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillOpenExternalBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillOpenExternalBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillOpenInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillOpenInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerDidOpenInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerDidOpenInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillCloseInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillCloseInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerDidCloseInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerDidCloseInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adCuePointsUpdate;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adCuePointsUpdate SWIFT_WARN_UNUSED_RESULT;
/// Sent when an ad started buffering
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adStartedBuffering;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adStartedBuffering SWIFT_WARN_UNUSED_RESULT;
/// Sent when ad finished buffering and ready for playback
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPlaybackReady;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPlaybackReady SWIFT_WARN_UNUSED_RESULT;
/// Sent when the ads request timed out.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull requestTimedOut;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)requestTimedOut SWIFT_WARN_UNUSED_RESULT;
/// delivered when ads request was sent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adsRequested;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adsRequested SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error occurs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull error;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit15AdEventDataKeys")
@interface AdEventDataKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediaTime;)
+ (NSString * _Nonnull)mediaTime SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull totalTime;)
+ (NSString * _Nonnull)totalTime SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull webOpener;)
+ (NSString * _Nonnull)webOpener SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull error;)
+ (NSString * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull adCuePoints;)
+ (NSString * _Nonnull)adCuePoints SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull adInfo;)
+ (NSString * _Nonnull)adInfo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull adTagUrl;)
+ (NSString * _Nonnull)adTagUrl SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The position type of the ad according to the content timeline.
typedef SWIFT_ENUM(NSInteger, AdPositionType) {
  AdPositionTypePreRoll = 0,
  AdPositionTypeMidRoll = 1,
  AdPositionTypePostRoll = 2,
};

typedef SWIFT_ENUM(NSInteger, AssetType) {
  AssetTypeMedia = 0,
  AssetTypeEpg = 1,
  AssetTypeUnknown = 2,
};

@protocol Player;
@class MessageBus;
@class MediaConfig;

/// class <code>BasePlugin</code> is a base plugin object used for plugin subclasses
SWIFT_CLASS("_TtC7PlayKit10BasePlugin")
@interface BasePlugin : NSObject
/// abstract implementation subclasses will have names
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginName;)
+ (NSString * _Nonnull)pluginName SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <Player> _Nullable player;
@property (nonatomic, weak) MessageBus * _Nullable messageBus;
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7PlayKit9DRMParams")
@interface DRMParams : NSObject
+ (DRMParams * _Nullable)fromJSON:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP7PlayKit14LocalDataStore_")
@protocol LocalDataStore
- (BOOL)saveWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)loadWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
@end


/// Implementation of LocalDataStore that saves data to files in the Library directory.
SWIFT_CLASS("_TtC7PlayKit21DefaultLocalDataStore")
@interface DefaultLocalDataStore : NSObject <LocalDataStore>
+ (DefaultLocalDataStore * _Nullable)defaultDataStore SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithDirectory:(NSSearchPathDirectory)directory error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)saveWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)loadWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
@end


SWIFT_CLASS("_TtC7PlayKit17FairPlayDRMParams")
@interface FairPlayDRMParams : DRMParams
@end

@class PKRequestParams;

/// <code>PKRequestParamsDecorator</code> used for getting updated request info
SWIFT_PROTOCOL("_TtP7PlayKit22PKRequestParamsAdapter_")
@protocol PKRequestParamsAdapter
/// Called when need to update the request adapter with information from the player.
/// Use this to update the adapter with any information available from the player.
/// For example, when media session id changes.
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit29KalturaPlaybackRequestAdapter")
@interface KalturaPlaybackRequestAdapter : NSObject <PKRequestParamsAdapter>
/// Installs a new kaltura request adapter on the provided player with custom application name.
/// \param player The player you want to use with the request adapter
///
/// \param applicationName the application name, if <code>nil</code> will use the bundle identifier.
///
+ (void)installIn:(id <Player> _Nonnull)player withAppName:(NSString * _Nonnull)appName;
/// Updates the request adapter with info from the player
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
/// Adapts the request params
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class AVURLAsset;
@class MediaSource;
@class MediaEntry;

/// Manage local (downloaded) assets.
SWIFT_CLASS("_TtC7PlayKit18LocalAssetsManager")
@interface LocalAssetsManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Create a new LocalAssetsManager for DRM-protected content.
/// Uses the default data-store.
+ (LocalAssetsManager * _Nonnull)managerWithDefaultDataStore SWIFT_WARN_UNUSED_RESULT;
/// Create a new LocalAssetsManager for DRM-protected content.
/// \param storage data store.
///
+ (LocalAssetsManager * _Nonnull)managerWithStorage:(id <LocalDataStore> _Nonnull)storage SWIFT_WARN_UNUSED_RESULT;
/// Create a new LocalAssetsManager for non-DRM content.
+ (LocalAssetsManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// Prepare an AVURLAsset for download via AVAssetDownloadTask.
/// Note that this is only relevant for FairPlay assets, and does not do anything otherwise.
/// \param asset an AVURLAsset, ready to be downloaded
///
/// \param mediaSource the original source for the asset. mediaSource.contentUrl and asset.url should point at the same file.
///
- (void)prepareForDownloadWithAsset:(AVURLAsset * _Nonnull)asset mediaSource:(MediaSource * _Nonnull)mediaSource;
/// Create a MediaEntry for a local asset. This is a convenience function that wraps the result of
/// <code>createLocalMediaSource(for:localURL:)</code> with a MediaEntry.
- (MediaEntry * _Nonnull)createLocalMediaEntryFor:(NSString * _Nonnull)assetId localURL:(NSURL * _Nonnull)localURL SWIFT_WARN_UNUSED_RESULT;
/// Get the preferred MediaSource for download purposes. This function takes into account
/// the capabilities of the device.
- (MediaSource * _Nullable)getPreferredDownloadableMediaSourceFor:(MediaEntry * _Nonnull)mediaEntry SWIFT_WARN_UNUSED_RESULT;
/// Notifies the SDK that downloading of an asset has finished.
- (void)assetDownloadFinishedWithLocation:(NSURL * _Nonnull)location mediaSource:(MediaSource * _Nonnull)mediaSource callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// Renew Downloaded Asset
- (void)renewDownloadedAssetWithLocation:(NSURL * _Nonnull)location mediaSource:(MediaSource * _Nonnull)mediaSource callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
- (void)unregisterAsset:(NSString * _Null_unspecified)assetUri callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
@end





/// A <code>MediaConfig</code> object defines behavior and info to use when preparing a <code>Player</code> object.
SWIFT_CLASS("_TtC7PlayKit11MediaConfig")
@interface MediaConfig : NSObject
@property (nonatomic, strong) MediaEntry * _Nonnull mediaEntry;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithMediaEntry:(MediaEntry * _Nonnull)mediaEntry startTime:(NSTimeInterval)startTime OBJC_DESIGNATED_INITIALIZER;
+ (MediaConfig * _Nonnull)configWithMediaEntry:(MediaEntry * _Nonnull)mediaEntry SWIFT_WARN_UNUSED_RESULT;
+ (MediaConfig * _Nonnull)configWithMediaEntry:(MediaEntry * _Nonnull)mediaEntry startTime:(NSTimeInterval)startTime SWIFT_WARN_UNUSED_RESULT;
/// Private init.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface MediaConfig (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

enum MediaType : NSInteger;

SWIFT_CLASS("_TtC7PlayKit10MediaEntry")
@interface MediaEntry : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSArray<MediaSource *> * _Nullable sources;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic) enum MediaType mediaType;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
- (nonnull instancetype)init:(NSString * _Nonnull)id sources:(NSArray<MediaSource *> * _Nonnull)sources duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJson:(id _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP7PlayKit18MediaEntryProvider_")
@protocol MediaEntryProvider
/// This method is triggering the creation of media base on custom parameters and actions.
/// <h2>Important:</h2>
/// <ul>
///   <li>
///     In order to write custom provider you should implement this method
///   </li>
///   <li>
///     In order to send an informative error in the ResponseElement
///     you should implement an error enum with the relevnat errors
///   </li>
/// </ul>
/// \code
///    // example of usage:
///     let cp : MediaEntryProvider =
///        CustomMediaEntryProvider(customParameters)
///
///     customMediaProvider.loadMedia { 
///        (r:ResponseElement<MediaEntry>) in
///         if (r.succedded){
///         ...
///
/// \endcode\param callback - a block that called on completion and returing response object wich contain the MediaEntry
///
- (void)loadMediaWithCallback:(void (^ _Nonnull)(MediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end

enum MediaFormat : NSInteger;

SWIFT_CLASS("_TtC7PlayKit11MediaSource")
@interface MediaSource : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSURL * _Nullable contentUrl;
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, copy) NSArray<DRMParams *> * _Nullable drmData;
@property (nonatomic) enum MediaFormat mediaFormat;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileExt;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init:(NSString * _Nonnull)id contentUrl:(NSURL * _Nullable)contentUrl mimeType:(NSString * _Nullable)mimeType drmData:(NSArray<DRMParams *> * _Nullable)drmData mediaFormat:(enum MediaFormat)mediaFormat OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJson:(id _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, MediaFormat) {
  MediaFormatDash = 0,
  MediaFormatHls = 1,
  MediaFormatWvm = 2,
  MediaFormatMp4 = 3,
  MediaFormatMp3 = 4,
  MediaFormatMov = 5,
  MediaFormatUnknown = 6,
};

typedef SWIFT_ENUM(NSInteger, MediaType) {
  MediaTypeLive = 0,
  MediaTypeVod = 1,
  MediaTypeUnknown = 2,
};


/// <code>MessageBus</code> object handles all event message observing and posting
SWIFT_CLASS("_TtC7PlayKit10MessageBus")
@interface MessageBus : NSObject
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events observeOn:(dispatch_queue_t _Nonnull)dispatchQueue block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
- (void)post:(PKEvent * _Nonnull)event;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit22MockMediaEntryProvider")
@interface MockMediaEntryProvider : NSObject <MediaEntryProvider>
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) id _Nullable content;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadMediaWithCallback:(void (^ _Nonnull)(MediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end

@protocol SessionProvider;
@class NSNumber;

SWIFT_CLASS("_TtC7PlayKit16OVPMediaProvider")
@interface OVPMediaProvider : NSObject <MediaEntryProvider>
@property (nonatomic, strong) id <SessionProvider> _Nullable sessionProvider;
@property (nonatomic, copy) NSString * _Nullable entryId;
@property (nonatomic, strong) NSNumber * _Nullable uiconfId;
@property (nonatomic, copy) NSString * _Nullable referrer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(id <SessionProvider> _Nonnull)sessionProvider OBJC_DESIGNATED_INITIALIZER;
- (void)loadMediaWithCallback:(void (^ _Nonnull)(MediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end


SWIFT_CLASS("_TtC7PlayKit13PKAdCuePoints")
@interface PKAdCuePoints : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull cuePoints;
- (nonnull instancetype)initWithCuePoints:(NSArray<NSNumber *> * _Nonnull)cuePoints OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly) BOOL hasPreRoll;
@property (nonatomic, readonly) BOOL hasMidRoll;
@property (nonatomic, readonly) BOOL hasPostRoll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <code>PKAdInfo</code> represents ad information.
SWIFT_CLASS("_TtC7PlayKit8PKAdInfo")
@interface PKAdInfo : NSObject
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSString * _Nonnull title;
/// The position of the pod in the content in seconds. Pre-roll returns 0,
/// post-roll returns -1 and mid-rolls return the scheduled time of the pod.
@property (nonatomic) NSTimeInterval timeOffset;
@property (nonatomic, copy) NSString * _Nonnull adDescription;
@property (nonatomic) BOOL isSkippable;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull adId;
/// The source ad server information included in the ad response.
@property (nonatomic, copy) NSString * _Nonnull adSystem;
@property (nonatomic) NSInteger height;
@property (nonatomic) NSInteger width;
/// Total number of ads in the pod this ad belongs to. Will be 1 for standalone ads.
@property (nonatomic) NSInteger totalAds;
/// The position of this ad within an ad pod. Will be 1 for standalone ads.
@property (nonatomic) NSInteger adPosition;
@property (nonatomic) BOOL isBumper;
@property (nonatomic) NSInteger podIndex;
/// returns the position type of the ad (pre, mid, post)
@property (nonatomic, readonly) enum AdPositionType positionType;
- (nonnull instancetype)initWithAdDescription:(NSString * _Nonnull)adDescription adDuration:(NSTimeInterval)adDuration title:(NSString * _Nonnull)title isSkippable:(BOOL)isSkippable contentType:(NSString * _Nonnull)contentType adId:(NSString * _Nonnull)adId adSystem:(NSString * _Nonnull)adSystem height:(NSInteger)height width:(NSInteger)width totalAds:(NSInteger)totalAds adPosition:(NSInteger)adPosition timeOffset:(NSTimeInterval)timeOffset isBumper:(BOOL)isBumper podIndex:(NSInteger)podIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <code>PKBoundary</code> used as abstract for boundary types (% and time).
SWIFT_PROTOCOL("_TtP7PlayKit10PKBoundary_")
@protocol PKBoundary
@property (nonatomic, readonly) NSTimeInterval time;
@end

@class PKPercentageTimeBoundary;
@class PKTimeBoundary;

/// <code>PKBoundaryFactory</code> factory class used to create boundary objects easily.
SWIFT_CLASS("_TtC7PlayKit17PKBoundaryFactory")
@interface PKBoundaryFactory : NSObject
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (PKPercentageTimeBoundary * _Nonnull)percentageTimeBoundaryWithBoundary:(NSInteger)boundary SWIFT_WARN_UNUSED_RESULT;
- (PKTimeBoundary * _Nonnull)timeBoundaryWithBoundaryTime:(NSTimeInterval)boundaryTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <hr/>
SWIFT_CLASS("_TtC7PlayKit11PKErrorCode")
@interface PKErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FailedToLoadAssetFromKeys;)
+ (NSInteger)FailedToLoadAssetFromKeys SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger AssetNotPlayable;)
+ (NSInteger)AssetNotPlayable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerItemFailed;)
+ (NSInteger)PlayerItemFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerFailed;)
+ (NSInteger)PlayerFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerItemErrorLogEvent;)
+ (NSInteger)PlayerItemErrorLogEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FailedToCreatePlugin;)
+ (NSInteger)FailedToCreatePlugin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MissingPluginConfig;)
+ (NSInteger)MissingPluginConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <hr/>
SWIFT_CLASS("_TtC7PlayKit13PKErrorDomain")
@interface PKErrorDomain : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Plugin;)
+ (NSString * _Nonnull)Plugin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Player;)
+ (NSString * _Nonnull)Player SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSError;

@interface PKEvent (SWIFT_EXTENSION(PlayKit))
/// MediaTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable adMediaTime;
/// TotalTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable adTotalTime;
/// WebOpener, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSObject * _Nullable adWebOpener;
/// Associated error from error event, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSError * _Nullable adError;
/// Ad cue points, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdCuePoints * _Nullable adCuePoints;
/// TotalTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, copy) NSString * _Nullable adTagUrl;
/// Ad info, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdInfo * _Nullable adInfo;
@end

@class PKTracks;
@class PKPlaybackInfo;
enum PlayerState : NSInteger;
@class AVMetadataItem;
@class PKTimeRange;

@interface PKEvent (SWIFT_EXTENSION(PlayKit))
/// Duration Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable duration;
/// Tracks Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKTracks * _Nullable tracks;
/// Current Bitrate Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKPlaybackInfo * _Nullable playbackInfo;
/// Current Old State Value, PKEvent Data Accessor
@property (nonatomic, readonly) enum PlayerState oldState;
/// Current New State Value, PKEvent Data Accessor
@property (nonatomic, readonly) enum PlayerState newState;
/// Associated error from error event, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Associated metadata from the event, PKEvent Data Accessor
@property (nonatomic, readonly, copy) NSArray<AVMetadataItem *> * _Nullable timedMetadata;
/// Content url, PKEvent Data Accessor
@property (nonatomic, readonly, strong) MediaSource * _Nullable mediaSource;
/// Content url, PKEvent Data Accessor
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable timeRanges;
@end

typedef SWIFT_ENUM(NSInteger, PKLogLevel) {
  PKLogLevelVerbose = 0,
  PKLogLevelDebug = 1,
  PKLogLevelInfo = 2,
  PKLogLevelWarning = 3,
  PKLogLevelError = 4,
};


SWIFT_CLASS("_TtC7PlayKit17PKNetworkSettings")
@interface PKNetworkSettings : NSObject
@property (nonatomic) double preferredPeakBitRate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>PKPercentageTimeBoundary</code> represents a time boundary in % against the media duration.
SWIFT_CLASS("_TtC7PlayKit24PKPercentageTimeBoundary")
@interface PKPercentageTimeBoundary : NSObject <PKBoundary>
/// The time to set the boundary on.
@property (nonatomic, readonly) NSTimeInterval time;
/// Creates a new <code>PKPercentageTimeBoundary</code> object from %.
/// attention:
/// boundary value should be between 1 and 100 otherwise will use default values!
- (nonnull instancetype)initWithBoundary:(NSInteger)boundary duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <code>PKPlaybackInfo</code> represents a playback info object.
SWIFT_CLASS("_TtC7PlayKit14PKPlaybackInfo")
@interface PKPlaybackInfo : NSObject
/// The actual bitrate of the playback.
@property (nonatomic, readonly) double bitrate;
/// The selected track indicated bitrate.
@property (nonatomic, readonly) double indicatedBitrate;
/// The throughput of the playback (download speed)
@property (nonatomic, readonly) double observedBitrate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7PlayKit16PKPlayerSettings")
@interface PKPlayerSettings : NSObject
/// The settings for network data consumption.
@property (nonatomic, strong) PKNetworkSettings * _Nonnull network;
@property (nonatomic, strong) id <PKRequestParamsAdapter> _Nullable contentRequestAdapter;
- (PKPlayerSettings * _Nonnull)createCopy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PKPlayerSettings (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit15PKRequestParams")
@interface PKRequestParams : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// <code>PKTimeBoundary</code> represents a time boundary in seconds.
SWIFT_CLASS("_TtC7PlayKit14PKTimeBoundary")
@interface PKTimeBoundary : NSObject <PKBoundary>
/// The time to set the boundary on.
@property (nonatomic, readonly) NSTimeInterval time;
/// Creates a new <code>PKTimeBoundary</code> object from seconds.
/// attention:
/// boundary value should be between 0 and duration otherwise will use default values!
- (nonnull instancetype)initWithBoundaryTime:(NSTimeInterval)boundaryTime duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7PlayKit11PKTimeRange")
@interface PKTimeRange : NSObject
@property (nonatomic, readonly) NSTimeInterval start;
@property (nonatomic, readonly) NSTimeInterval end;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class Track;

SWIFT_CLASS("_TtC7PlayKit8PKTracks")
@interface PKTracks : NSObject
@property (nonatomic, copy) NSArray<Track *> * _Nullable audioTracks;
@property (nonatomic, copy) NSArray<Track *> * _Nullable textTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum PlaybackContextType : NSInteger;

SWIFT_CLASS("_TtC7PlayKit20PhoenixMediaProvider")
@interface PhoenixMediaProvider : NSObject <MediaEntryProvider>
@property (nonatomic, strong) id <SessionProvider> _Nullable sessionProvider;
@property (nonatomic, copy) NSString * _Nullable assetId;
@property (nonatomic) enum AssetType type;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable formats;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable fileIds;
@property (nonatomic) enum PlaybackContextType playbackContextType;
@property (nonatomic, copy) NSString * _Nullable networkProtocol;
@property (nonatomic, copy) NSString * _Nullable referrer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadMediaWithCallback:(void (^ _Nonnull)(MediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end

@class PluginConfig;

/// Manager class used for:
/// <ul>
///   <li>
///     creating <code>Player</code> objects.
///   </li>
///   <li>
///     creating and registering plugins.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7PlayKit14PlayKitManager")
@interface PlayKitManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientTag;)
+ (NSString * _Nonnull)clientTag SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlayKitManager * _Nonnull sharedInstance;)
+ (PlayKitManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Loads and returns a player object using a provided configuration.
/// important:
/// In order to start buffering the video after loading the player
/// you must call prepare on the player with the same configuration.
/// \code
///     player = PlayKitManager.sharedInstance.loadPlayer(config: config)
///     player.prepare(config)
///
/// \endcode\param config The configuration object to load the player with.
///
///
/// returns:
/// A player loaded using the provided configuration.
- (id <Player> _Nullable)loadPlayerWithPluginConfig:(PluginConfig * _Nullable)pluginConfig error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)registerPlugin:(SWIFT_METATYPE(BasePlugin) _Nonnull)pluginClass;
/// sets the logging level for our logger.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum PKLogLevel logLevel;)
+ (enum PKLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum PKLogLevel)newValue;
@end

typedef SWIFT_ENUM(NSInteger, PlaybackContextType) {
  PlaybackContextTypeTrailer = 0,
  PlaybackContextTypeCatchup = 1,
  PlaybackContextTypeStartOver = 2,
  PlaybackContextTypePlayback = 3,
  PlaybackContextTypeUnknown = 4,
};

@protocol PlayerDelegate;
@class PlayerView;
@protocol AVPictureInPictureControllerDelegate;
@class AVPictureInPictureController;

SWIFT_PROTOCOL("_TtP7PlayKit6Player_")
@protocol Player
@property (nonatomic, weak) id <PlayerDelegate> _Nullable delegate;
/// The player’s associated media entry.
@property (nonatomic, readonly, weak) MediaEntry * _Nullable mediaEntry;
/// the player’s settings
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
/// The player’s view component.
@property (nonatomic, weak) PlayerView * _Nullable view;
/// The current player position.
@property (nonatomic) NSTimeInterval currentTime;
/// The player’s currentState.
@property (nonatomic, readonly) enum PlayerState currentState;
/// The player’s duration.
@property (nonatomic, readonly) BOOL isPlaying;
/// The player’s duration.
@property (nonatomic, readonly) NSTimeInterval duration;
/// Get the player’s current audio track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
/// Get the player’s current text track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
/// The player’s session id. the <code>sessionId</code> is initialized when the player loads.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Indicates the desired rate of playback, 0.0 means “paused”, 1.0 indicates a desire to play at the natural rate of the current item.
@property (nonatomic, readonly) float rate;
/// Provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
/// Prepare for playing an entry. play when it’s ready. (preparing starts buffering the entry)
- (void)prepare:(MediaConfig * _Nonnull)config;
/// send play action for the player.
- (void)play;
/// send pause action for the player.
- (void)pause;
/// send resume action for the player.
- (void)resume;
/// send stop action for the player.
- (void)stop;
/// send seek action for the player.
- (void)seekTo:(CMTime)time;
/// Release player resources.
- (void)destroy;
/// Add Observation to relevant event.
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Add Observation to relevant events.
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Remove Observer for single event.
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
/// Remove Observer for several events.
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
/// Select Track
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
/// Update Plugin Config
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
/// Create PiP Controller
- (AVPictureInPictureController * _Nullable)createPiPControllerWith:(id <AVPictureInPictureControllerDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
/// \param interval time interval for the periodic invocation.
///
/// \param dispatchQueue dispatch queue to observe changes on (nil value will use main).
///
/// \param block block to handle the observation.
///
///
/// returns:
/// A uuid token to represent the observation, used to later remove a single observation.
- (NSUUID * _Nonnull)addPeriodicObserverWithInterval:(NSTimeInterval)interval observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval))block SWIFT_WARN_UNUSED_RESULT;
/// Adds a boundary time observer for the selected boundaries in time (25%, 50%, 30s etc.)
/// attention:
/// if a boundary is crossed while seeking the observation <em>won’t be triggered</em>.
/// \param boundaries boundary objects.
///
/// \param dispatchQueue dispatch queue to observe changes on (nil value will use main).
///
/// \param block block to handle the observation with the observed boundary, block returns (time, boundary percentage).
///
///
/// returns:
/// A uuid token to represent the observation, used to later remove a single observation.
- (NSUUID * _Nonnull)addBoundaryObserverWithBoundaries:(NSArray<id <PKBoundary>> * _Nonnull)boundaries observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval, double))block SWIFT_WARN_UNUSED_RESULT;
/// removes a single periodic observer using the uuid provided when added the observation.
- (void)removePeriodicObserver:(NSUUID * _Nonnull)token;
/// removes a single boundary observer using the uuid provided when added the observation.
- (void)removeBoundaryObserver:(NSUUID * _Nonnull)token;
@end


SWIFT_CLASS("_TtC7PlayKit19PlayerDecoratorBase")
@interface PlayerDecoratorBase : NSObject <Player>
@property (nonatomic, strong) id <PlayerDelegate> _Nullable delegate;
@property (nonatomic, readonly, weak) MediaEntry * _Nullable mediaEntry;
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, weak) PlayerView * _Nullable view;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly) float rate;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)setPlayer:(id <Player> _Null_unspecified)player;
- (id <Player> _Nonnull)getPlayer SWIFT_WARN_UNUSED_RESULT;
- (void)destroy;
- (void)play;
- (void)pause;
- (void)seekTo:(CMTime)time;
- (void)resume;
- (void)stop;
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (NSUUID * _Nonnull)addPeriodicObserverWithInterval:(NSTimeInterval)interval observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval))block SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)addBoundaryObserverWithBoundaries:(NSArray<id <PKBoundary>> * _Nonnull)boundaries observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval, double))block SWIFT_WARN_UNUSED_RESULT;
- (void)removePeriodicObserver:(NSUUID * _Nonnull)token;
- (void)removeBoundaryObserver:(NSUUID * _Nonnull)token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PlayerDecoratorBase (SWIFT_EXTENSION(PlayKit))
- (AVPictureInPictureController * _Nullable)createPiPControllerWith:(id <AVPictureInPictureControllerDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


SWIFT_PROTOCOL("_TtP7PlayKit14PlayerDelegate_")
@protocol PlayerDelegate
- (BOOL)playerShouldPlayAd:(id <Player> _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
@end


/// PlayerEvent is a class used to reflect player events.
SWIFT_CLASS("_TtC7PlayKit11PlayerEvent")
@interface PlayerEvent : PKEvent
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull allEventTypes;)
+ (NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull)allEventTypes SWIFT_WARN_UNUSED_RESULT;
/// Sent when enough data is available that the media can be played, at least for a couple of frames.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull canPlay;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)canPlay SWIFT_WARN_UNUSED_RESULT;
/// The metadata has loaded or changed, indicating a change in duration of the media. This is sent, for example, when the media has loaded enough that the duration is known.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull durationChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)durationChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback stopped.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull stopped;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)stopped SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull ended;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)ended SWIFT_WARN_UNUSED_RESULT;
/// The media’s metadata has finished loading; all attributes now contain as much useful information as they’re going to.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull loadedMetadata;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)loadedMetadata SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull play;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)play SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback is paused.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull pause;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)pause SWIFT_WARN_UNUSED_RESULT;
/// Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playing;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playing SWIFT_WARN_UNUSED_RESULT;
/// Sent when a seek operation begins.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull seeking;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)seeking SWIFT_WARN_UNUSED_RESULT;
/// Sent when a seek operation completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull seeked;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)seeked SWIFT_WARN_UNUSED_RESULT;
/// Sent when tracks available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull tracksAvailable;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)tracksAvailable SWIFT_WARN_UNUSED_RESULT;
/// Sent when Playback Params Updated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playbackInfo;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playbackInfo SWIFT_WARN_UNUSED_RESULT;
/// Sent when player state is changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull stateChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)stateChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when timed metadata is available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull timedMetadata;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)timedMetadata SWIFT_WARN_UNUSED_RESULT;
/// Sent when source was selected.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull sourceSelected;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)sourceSelected SWIFT_WARN_UNUSED_RESULT;
/// Sent when loaded time ranges was changed, loaded time ranges represent the buffered content.
/// could be used to show amount buffered on the playhead UI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull loadedTimeRanges;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)loadedTimeRanges SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error occurs in the player that the playback can recover from.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull error;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Sent when a plugin error occurs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull pluginError;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)pluginError SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error log event received from player (non fatal errors).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull errorLog;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)errorLog SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end

/// An PlayerState is an enum of different player states
typedef SWIFT_ENUM(NSInteger, PlayerState) {
/// Sent when player’s state idle.
  PlayerStateIdle = 0,
/// Sent when player’s state ready.
  PlayerStateReady = 1,
/// Sent when player’s state buffering.
  PlayerStateBuffering = 2,
/// Sent when player’s state ended.
/// Same event sent when observing PlayerEvent.ended.
/// This state was attached to reflect current state and avoid unrelevant boolean.
  PlayerStateEnded = 3,
/// Sent when player’s state errored.
  PlayerStateError = 4,
/// Sent when player’s state unknown.
  PlayerStateUnknown = -1,
};

@class NSCoder;

/// A simple <code>UIView</code> subclass that is backed by an <code>AVPlayerLayer</code> layer.
SWIFT_CLASS("_TtC7PlayKit10PlayerView")
@interface PlayerView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// adds the player view as a subview to the container view and sets up constraints
- (void)addToContainer:(UIView * _Nonnull)container;
/// creates a new <code>PlayerView</code> instance and connects it to the player
/// important:
/// make sure to keep strong reference for the player view instance (either from adding as subview or property),
/// otherwise it will be deallocated as the framework holds a weak reference to it
+ (PlayerView * _Nonnull)createPlayerViewForPlayer:(id <Player> _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>PluginConfig</code> object defines config to use when loading a plugin object.
SWIFT_CLASS("_TtC7PlayKit12PluginConfig")
@interface PluginConfig : NSObject
/// Plugins config dictionary holds [plugin name : plugin config]
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull config;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithConfig:(NSDictionary<NSString *, id> * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
/// Private init.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface PluginConfig (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// A SessionProvider that just reflects its input parameters – baseUrl, partnerId, ks.
/// Unlike the full OVPSessionManager, this class does not attempt to manage (create, renew, validate, clear) a session.
/// The application is expected to provide a valid KS, which it can update as required via the <code>ks</code> property. For some
/// use cases, the KS can be null (anonymous media playback, if allowed by access-control). Basic usage with a OVPMediaProvider:
/// \code
/// let mediaProvider = OVPMediaProvider(SimpleOVPSessionProvider(serverURL: "https://cdnapisec.kaltura.com", 
///                                                                partnerId: 1851571, 
///                                                                ks: applicationKS))
/// mediaProvider.set(entryId: "0_pl5lbfo0").loadMedia { (entry) in
///    print("entry:", entry.data ?? "<nil>")
/// }
///
/// \endcode
SWIFT_CLASS("_TtC7PlayKit24SimpleOVPSessionProvider")
@interface SimpleOVPSessionProvider : NSObject <SessionProvider>
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;
@property (nonatomic, readonly) int64_t partnerId;
@property (nonatomic, copy) NSString * _Nullable ks;
/// Build an OVP SessionProvider with the specified parameters.
/// \param serverURL Kaltura Server URL, such as <code>"https://cdnapisec.kaltura.com"</code>.
///
/// \param partnerId Kaltura partner id.
///
/// \param ks Kaltura Session token.
///
- (nonnull instancetype)initWithServerURL:(NSString * _Nonnull)serverURL partnerId:(int64_t)partnerId ks:(NSString * _Nullable)ks OBJC_DESIGNATED_INITIALIZER;
- (void)loadKSWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSTimer (SWIFT_EXTENSION(PlayKit))
/// Create a timer that will call <code>block</code> after interval once.
+ (NSTimer * _Nonnull)after:(NSTimeInterval)interval :(void (^ _Nonnull)(void))block SWIFT_WARN_UNUSED_RESULT;
/// Create a timer that will call <code>block</code> every interval.
+ (NSTimer * _Nonnull)every:(NSTimeInterval)interval :(void (^ _Nonnull)(void))block SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit5Track")
@interface Track : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
